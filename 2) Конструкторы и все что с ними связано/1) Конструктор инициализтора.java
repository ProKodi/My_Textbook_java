






public class Main{
public 
    static void main(String args[]){
        // Создаем обьект с 1 аргументом для инициализации
        My_class new_class = new My_class(4);
        // Создаем обьект с 2 аргументами для инициализации
        My_class new_class2 = new My_class(4, "Все прекрасно");
        // Создаем обьект с помощью конструктора копирования
        My_class new_class3 = new My_class(new_class2);
        // Создаем обьект с помощью конструктора по умолчанию
        My_class new_class4 = new My_class();
    }
}

class My_class{

    private int number; // Какое-то поле класса
    private String state;
    

    /*Добаление конструктора для класса
    Конструкторы представляют специальную функцию, которая имеет то же имя, что и класс. 
    Данная функция не возвращает никакого значения и позволяют инициалилизировать объект класса во время его создания.
    Данная функция гарантирует что, что поля класса будут иметь определенные значения. 
    При каждом создании нового объекта класса вызывается конструктор класса.
    Конструкция:
    "название класса"("аргументы для конструктора класса"){
        "действия конструктора класса"
    }
    */
    public My_class(int number){
        // Данный конструктор используется когда класс инициализируют 1 параметром
        this.number = number; 
    }
    
    public My_class(int number, String state){
        // Данный конструктор используется когда класс инициализируют 2 параметрами
        // Вызов конструктора класса My_class с одним параметром
        this(number); // вызовет следующий конструктор: public My_class(int number)
        this.state = state;
        System.out.println("Статус: " + this.state);
    }
    // Конструктор копирования (используется когда инициализирем обьектом это-го же класса)
    public My_class(final My_class opt){
        this(opt.number, opt.state); 
    }
    // Конструктор по умолчанию (используется когда создаем обьект без инициализации)
    // Обычно такие конструкторы использую для того что-бы создать путой объект с последующей инициализацией
    public My_class(){}
};