



/*
При вызове функции программа должна определять, 
    с какой именно реализацией функции соотносить этот вызов, то есть связать вызов функции с самой функцией. 
В Java есть два типа связывания - статическое и динамическое:
    1) статическое/раннее связывание -  когда вызов функций фиксируются до выполнения программы на этапе компиляции. 
    2) динамическое/позднее связывание - позволяет на этапе выполнения решать, метод какого типа вызвать. 

Виртуальные функции используются Java по умолчанию 
(работает только в том случае, если метод не является статическим)

Отличие от переопределения в том, что выбор метода для виртуальных методов осуществляется на этапе выполнения (когда уже известен тип обьекта)
Виртуальный метод должен быть обьявлен в дочернем и в родительском классе. 

Правила:
    1) Виртуальные методы наследуются (их можно переопределять)
    2) если виртуальный метод переопределен в производном классе, то обьекты 
    этого класса могут получить доступ к варианту метода базового класса с помощью видимости
    3) Виртуальный метод не может быть статическим 

*/
/*
Запрет переопределения:

С помощью спецификатора final  можно запретить определение в производных классах функций, 
    которые имеют то же самое имя, возвращаемый тип и список параметров, что и виртуальная функция в базовом классе.  

*/


public class Main{
public 
    static void main(String args[]){
        // Обьявляем обьект 
        Human pers = new Human("Mickle");
        // Выводим информацию
        pers.print(); // Воспользуется методом класса Human

        // Обьявляем обьект 
        Company compan = new Company("Bob", "My company");
        // Выводим информацию
        compan.print(); // Воспользуется методом класса Human (так как запрещено переопределение)

    }
}


class Human{
protected String name;
public Human(String name){
        this.name = name;
    }
    // Метод для отображения информации в консоли
    public final void print(){
        System.out.println("Name: " + this.name); 
    }
}

class Company extends Human{
protected String name_company; 
public Company(String name, String name_company){
        super(name); 
        this.name_company = name_company;
    }
    /* Метод для отображения информации в консоли 
    (не возможно переопределить так как в базовом переопределение этого метода запрещено)*/
    /*public void print(){
        System.out.println("Name: " + this.name); 
    }*/

};